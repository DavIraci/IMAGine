/* Conditional Statement */
    if ( condition ) then { action_list; };

    if ( condition ) then { action_list; } else { action_list; }

    while ( condition ) do { action_list; }

    foreach ( variable_name:list_name ){ action_list; }
/* End Conditional Statement */

/* Built-In Functions */

/* End Built-In Functions */

/* Image Method */
    img name_variable = " /path.format "; //Declare image variable 

    int width(img name_image);                          /* Returns the number of pixels across the image */
    int height(img name_image);                         /* Returns the number of pixels down the image */
    int bands(img name_image);                          /* Returns the number of bands(channels) in the image */
    double min(img name_image);                         /* Returns the minimum value in an image */
    double max(img name_image);                         /* Returns the maximum value in an image */
    double average(img name_image);                     /* Returns the average value in an image */
    img invert(img name_image, char* output_path);      /* Returns the inverted image and saves it in "output_path" */
    img convertColorSpace(img name_image, char* output_path, char* space); 
                    char* space can be:     grey16      // generic 16-bit mono
                                            hsv         // pixels are HSV
                                            yxy         // pixels are CIE Yxy
                                            lch         // pixels are in CIE LCh space
                                            cmc         // a uniform colourspace based on CMC(1:1)
                                            lab         // pixels are in CIE Lab space

/* End Image Method */
