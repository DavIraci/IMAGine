/* Conditional Statement */
    if ( condition ) then { action_list; };                                 /* If the condition is true the action_list will be performed */

    if ( condition ) then { action_list; } else { action_list; }            /* If the condition is true the "then" action_list will be performed, if isn't true the "else" one  */

    while ( condition ) do { action_list; }                                 /* Unless the condition is true the action_list will be fermormed */

    foreach ( variable_name:list_name ){ action_list; }                     /* Variable_name each round will be one of the list_name element in order */
/* End Conditional Statement */

/* Define a User Function */
    def function_name(arguments_list) { action_list }                       /* When the function will be invocated passing the right number of argument, the action_list will be performed */
/* End Define a User Function */

/* Compare */
    /* The compare will return 1 if it's true and 0 if it's false */
    value == value              /* Equal */
    value != value              /* Unequal */
    value >  value              /* More than */
    value >= value              /* More or equal */
    value <  value              /* Less than */
    value <= value              /* Less or equal */
            Value can be only umbers, execpt for the Equal compare that can be used too see if strings are exactly the same
/* End Compare */

/* Logical Operators */
    assertion && assertion              /* AND: True if both are 1 */
    assertion || assertion              /* OR: False if both are 1 */
/* End Logical Operators */

/* Aritmetichal Operators */
    value + value                       /* Return the sum of the values */
    value - value                       /* Return the subtract of the values */
    value * value                       /* Return the product of the values */
    value / value                       /* Return the divide of the values */
    | value |                           /* Return the absolute value */
            /* Value can be only umbers, execpt for the sum and the product that can be used with strings:
                The sum of a string and somebody else will return a string concatenation
                The product of a string and a number will return the string number times */
/* End Aritmetichal Operators */

/* Built-In Functions */
    /* Image Method */
        img name_variable = " /path.format ";                                                               /* Declare image variable */

        int width(img name_image);                                                                          /* Returns the number of pixels across the image */
        int height(img name_image);                                                                         /* Returns the number of pixels down the image */
        int bands(img name_image);                                                                          /* Returns the number of bands(channels) in the image */
        double min(img name_image);                                                                         /* Returns the minimum value in an image */
        double max(img name_image);                                                                         /* Returns the maximum value in an image */
        double average(img name_image);                                                                     /* Returns the average value in an image */
        img invert(img name_image, char* output_path);                                                      /* Returns the inverted image and saves it in "output_path" */
        img histEq(img name_image, char* output_path);                                                      /* Returns the input image with an equalized histogram and saves it in "output_path" */
        img normalise(img name_image, char* output_path);                                                   /* Returns the input image with a normalized histogram and saves it in "output_path" */
        img canny(img name_image, char* output_path);                                                       /* Finds the edge in the input image with the Canny method,returns it and saves it in "output_path" */
        img sobel(img name_image, char* output_path);                                                       /* Finds the edges in the input image with the Sobel edge detector method and,returns it and saves it in "output_path" */
        img sharpen(img name_image, char* output_path);                                                     /* Performs a gaussian blur and subtracts it from the input image to generate a high-frequency signal, returns it and saves it in "output_path" */
        img convert(img name_image, char* output_path);                                                     /* Returns the converted input image with the specified format in "output_path" and saves it in "output_path" */
                                format allowed:         tif
                                                        jpeg
                                                        jpg
                                                        hdr
                                                        raw
        img convertColorSpace(img name_image, char* output_path, char* space);                              /* Returns the input image but moves it to differt space and saves it in "output_path" */
                                char* space can be:     grey16              // generic 16-bit mono
                                                        hsv                 // pixels are HSV
                                                        yxy                 // pixels are CIE Yxy
                                                        lch                 // pixels are in CIE LCh space
                                                        cmc                 // a uniform colourspace based on CMC(1:1)
                                                        lab                 // pixels are in CIE Lab space
        img add(img name_image1, img name_image2, char* output_path);                                       /* Returns bitwise sum of the pixels of the 2 images and saves it in "output_path" */
        img subtract(img name_image1, img name_image2, char* output_path);                                  /* Returns bitwise difference of the pixels of the 2 images and saves it in "output_path" */
        img rotate(img name_image, char* output_path, double rotate_angle);                                 /* Returns the rotated input image by the rotate_angle and saves it in "output_path" */
        img flip(img name_image, char* output_path, char* direction);                                       /* Returns the flipped input image with the specified direction and saves it in "output_path" */
                                direction allowed:      hor                 //Horizontal flip
                                                        ver                 //Vertical flip
        img gaussianBlur(img name_image, char* output_path, double mask_dim);                               /* Returns the blurred input image with a gaussian mask of size mask_dim and saves it in "output_path" */
        img smartCrop(img name_image, char* output_path, double width, double height);                      /* Crops an image down to a specified width and height by removing the boring parts(it looks for features likely to draw human attention), returns it and saves it in "output_path" */
        img zoom(img name_image, char* output_path, int xfactor, int xfactor);                              /* Returns the zoomed input image by repeating pixels. This is fast nearest-neighbour zoom. It saves it in "output_path" */
        img crop(img name_image, char* output_path, double left, double top, double width, double height);  /* Extract an area of dimensions left, top, width, height from an image ,returns it and saves it in "output_path" */
    /* End Image Method */

    /* List Method */
        list list_name={element_1, element_2,..., element_n};                                               /* Declare list. Can also create a empty list by "{};" after equal sign */
                    list accept miscellanus type so element can be:
                                                        int
                                                        double
                                                        string
                                                        image
                                                        variable

        int length(list list_name);                                                                         /* Return the number of elements in the list */
        void push(list list_name, element);                                                                 /* Append the element in the list */
        void insert(list list_name, element, int position);                                                 /* Insert element in the given position */
        void remove(list list_name, int position);                                                          /* Remove element in the given position */
        element pop(list list_name);                                                                        /* Remove and return last element */
        element get(list list_name, int position);                                                          /* Return element in the given position */ 
    /* End List Method */
/* End Built-In Functions */