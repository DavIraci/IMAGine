/* Conditional Statement */
    if ( condition ) then { action_list; };

    if ( condition ) then { action_list; } else { action_list; }

    while ( condition ) do { action_list; }

    foreach ( variable_name:list_name ){ action_list; }
/* End Conditional Statement */

/* Built-In Functions */

/* End Built-In Functions */

/* Image Method */
    img name_variable = " /path.format "; //Declare image variable 

    int width(img name_image);                                                                          /* Returns the number of pixels across the image */
    int height(img name_image);                                                                         /* Returns the number of pixels down the image */
    int bands(img name_image);                                                                          /* Returns the number of bands(channels) in the image */
    double min(img name_image);                                                                         /* Returns the minimum value in an image */
    double max(img name_image);                                                                         /* Returns the maximum value in an image */
    double average(img name_image);                                                                     /* Returns the average value in an image */
    img invert(img name_image, char* output_path);                                                      /* Returns the inverted image and saves it in "output_path" */
    img histEq(img name_image, char* output_path);                                                      /* Returns the input image with an equalized histogram and saves it in "output_path" */
    img normalise(img name_image, char* output_path);                                                   /* Returns the input image with an normalized histogram and saves it in "output_path" */
    img canny(img name_image, char* output_path);                                                       /* Returns the edge in the input image with the Canny method and saves it in "output_path" */
    img sobel(img name_image, char* output_path);                                                       /* Returns the edges in the input image with the Sobel edge detector method and saves it in "output_path" */
    img sharpen(img name_image, char* output_path);                                                     /* Performs a gaussian blur and subtracts it from the input image to generate a high-frequency signal, returns it and saves it in "output_path" */
    img convert(img name_image, char* output_path);                                                     /* Returns the converted input image with the specified format in "output_path" and saves it in "output_path" */
                            format allowed:         tif
                                                    jpeg
                                                    jpg
                                                    hdr
                                                    raw
    img convertColorSpace(img name_image, char* output_path, char* space);                              /* Returns the input image but moves it to differt space and saves it in "output_path" */
                            char* space can be:     grey16              // generic 16-bit mono
                                                    hsv                 // pixels are HSV
                                                    yxy                 // pixels are CIE Yxy
                                                    lch                 // pixels are in CIE LCh space
                                                    cmc                 // a uniform colourspace based on CMC(1:1)
                                                    lab                 // pixels are in CIE Lab space
    img add(img name_image1, img name_image2, char* output_path);                                       /* Returns bitwise sum of the pixels of the 2 images and saves it in "output_path" */
    img subtract(img name_image1, img name_image2, char* output_path);                                  /* Returns bitwise subtract of the pixels of the 2 images and saves it in "output_path" */
    img rotate(img name_image, char* output_path, double rotate_angle);                                 /* Returns the converted input image with the specified format in "output_path" and saves it in "output_path" */
    img flip(img name_image, char* output_path, char* direction);                                       /* Returns the converted input image with the specified format in "output_path" and saves it in "output_path" */
                            direction allowed:      hor                 //Horizontal flip
                                                    ver                 //Vertical flip
    img gaussianBlur(img name_image, char* output_path, double mask_dim);                               /* Returns the converted input image with the specified format in "output_path" and saves it in "output_path" */
    img smartCrop(img name_image, char* output_path, double width, double height);                      /* Returns the converted input image with the specified format in "output_path" and saves it in "output_path" */
    img zoom(img name_image, char* output_path, int xfactor, int xfactor);                              /* Returns the converted input image with the specified format in "output_path" and saves it in "output_path" */
    img crop(img name_image, char* output_path, double left, double top, double width, double height);  /* Returns the converted input image with the specified format in "output_path" and saves it in "output_path" */
/* End Image Method */
